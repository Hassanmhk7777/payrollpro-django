from django.core.management.base import BaseCommand
from django.contrib.auth.models import User, Group
from paie.models import Employe, Site, Departement, Absence, RubriquePersonnalisee, EmployeRubrique
from datetime import datetime, timedelta
from decimal import Decimal
import random

class Command(BaseCommand):
    help = 'Cr√©er des donn√©es de d√©monstration r√©alistes pour PayrollPro'

    def handle(self, *args, **options):
        self.stdout.write(self.style.SUCCESS('üöÄ Cr√©ation des donn√©es de d√©monstration PayrollPro...'))

        # Cr√©er les groupes d'utilisateurs s'ils n'existent pas
        self.create_user_groups()
        
        # Cr√©er des sites r√©alistes
        self.create_sites()
        
        # Cr√©er des d√©partements
        self.create_departments()
        
        # Cr√©er des employ√©s avec des donn√©es r√©alistes
        self.create_employees()
        
        # Cr√©er des rubriques personnalis√©es r√©alistes
        self.create_custom_rubriques()
        
        # Assigner des rubriques aux employ√©s
        self.assign_rubriques_to_employees()
        
        # Cr√©er quelques absences
        self.create_absences()
        
        self.stdout.write(self.style.SUCCESS('‚úÖ Donn√©es de d√©monstration cr√©√©es avec succ√®s!'))

    def create_user_groups(self):
        """Cr√©er les groupes d'utilisateurs"""
        groups = ['Admin', 'RH', 'Employe']
        for group_name in groups:
            Group.objects.get_or_create(name=group_name)
        self.stdout.write(f'üë• Groupes d\'utilisateurs cr√©√©s')

    def create_sites(self):
        """Cr√©er des sites avec donn√©es compl√®tes"""
        self.site1, created = Site.objects.get_or_create(
            code='CAS',
            defaults={
                'nom': 'Si√®ge Social Casablanca',
                'raison_sociale': 'PayrollPro SARL',
                'forme_juridique': 'SARL',
                'numero_rc': 'RC123456',
                'numero_cnss': 'CNSS789012',
                'numero_patente': 'PAT345678',
                'ice': '002345678901234',
                'adresse': 'Boulevard Mohammed V, Twin Center, Casablanca',
                'ville': 'Casablanca',
                'code_postal': '20100',
                'telephone': '+212 522 123 456',
                'email': 'contact@payrollpro.ma',
                'directeur_general': 'Ahmed BENALI',
                'directeur_rh': 'Fatima ALAOUI',
                'actif': True
            }
        )
        
        self.site2, created = Site.objects.get_or_create(
            code='RAB',
            defaults={
                'nom': 'Filiale Rabat',
                'raison_sociale': 'PayrollPro SARL - Filiale Rabat',
                'forme_juridique': 'Filiale',
                'numero_rc': 'RC654321',
                'numero_cnss': 'CNSS210987',
                'adresse': 'Avenue Hassan II, Agdal, Rabat',
                'ville': 'Rabat',
                'code_postal': '10000',
                'telephone': '+212 537 654 321',
                'email': 'rabat@payrollpro.ma',
                'directeur_general': 'Omar FASSI',
                'directeur_rh': 'Aicha BENALI',
                'actif': True
            }
        )
        self.stdout.write(f'üè¢ Sites cr√©√©s: {self.site1.nom}, {self.site2.nom}')

    def create_departments(self):
        """Cr√©er des d√©partements r√©alistes"""
        departments_data = [
            ('RH', 'Ressources Humaines', self.site1),
            ('IT', 'Informatique', self.site1),
            ('COMPTA', 'Comptabilit√©', self.site1),
            ('VENTE', 'Commercial', self.site1),
            ('PROD', 'Production', self.site1),
            ('ADMIN', 'Administration', self.site2),
            ('LOG', 'Logistique', self.site2),
        ]
        
        self.departments = {}
        for code, nom, site in departments_data:
            dept, created = Departement.objects.get_or_create(
                code=code,
                site=site,
                defaults={'nom': nom, 'actif': True}
            )
            self.departments[code] = dept
        
        self.stdout.write(f'üè¨ D√©partements cr√©√©s: {len(self.departments)}')

    def create_employees(self):
        """Cr√©er des employ√©s avec des salaires r√©alistes"""
        employees_data = [
            # Admin
            ('admin', 'Administrateur', 'Syst√®me', 'admin@payrollpro.ma', 'Admin', 'IT', 15000, 'Administrateur syst√®me'),
            
            # RH
            ('drh', 'Fatima', 'ALAOUI', 'f.alaoui@payrollpro.ma', 'RH', 'RH', 12000, 'Directrice RH'),
            ('rh1', 'Zakaria', 'BERRADA', 'z.berrada@payrollpro.ma', 'RH', 'RH', 8000, 'Responsable RH'),
            ('rh2', 'Nadia', 'BENNANI', 'n.bennani@payrollpro.ma', 'RH', 'RH', 6500, 'Assistante RH'),
            
            # IT
            ('dev1', 'Mehdi', 'CHAKIR', 'm.chakir@payrollpro.ma', 'Employe', 'IT', 9500, 'D√©veloppeur Senior'),
            ('dev2', 'Sara', 'AMRANI', 's.amrani@payrollpro.ma', 'Employe', 'IT', 7500, 'D√©veloppeuse'),
            ('sys1', 'Youssef', 'MOUNIR', 'y.mounir@payrollpro.ma', 'Employe', 'IT', 8500, 'Administrateur r√©seau'),
            
            # Comptabilit√©
            ('comptable1', 'Rachid', 'JILALI', 'r.jilali@payrollpro.ma', 'Employe', 'COMPTA', 7000, 'Comptable'),
            ('comptable2', 'Laila', 'OUALI', 'l.ouali@payrollpro.ma', 'Employe', 'COMPTA', 6000, 'Aide-comptable'),
            
            # Commercial
            ('comm1', 'Hassan', 'TAZI', 'h.tazi@payrollpro.ma', 'Employe', 'VENTE', 8000, 'Responsable commercial'),
            ('comm2', 'Imane', 'BOUHALI', 'i.bouhali@payrollpro.ma', 'Employe', 'VENTE', 5500, 'Commerciale'),
            
            # Production
            ('prod1', 'Abdellah', 'RHALI', 'a.rhali@payrollpro.ma', 'Employe', 'PROD', 5000, 'Chef d\'√©quipe'),
            ('prod2', 'Khadija', 'MANSOURI', 'k.mansouri@payrollpro.ma', 'Employe', 'PROD', 4200, 'Op√©ratrice'),
        ]
        
        self.employees = {}
        for username, prenom, nom, email, role, dept_code, salaire, fonction in employees_data:
            # Cr√©er l'utilisateur
            user, created = User.objects.get_or_create(
                username=username,
                defaults={
                    'first_name': prenom,
                    'last_name': nom,
                    'email': email,
                    'is_active': True
                }
            )
            
            if created:
                user.set_password('demo123')  # Mot de passe par d√©faut
                user.save()
                
                # Ajouter au groupe appropri√©
                group = Group.objects.get(name=role)
                user.groups.add(group)
            
            # Cr√©er l'employ√©
            employe, created = Employe.objects.get_or_create(
                user=user,
                defaults={
                    'matricule': username.upper(),  # Utiliser le username comme matricule
                    'nom': nom,
                    'prenom': prenom,
                    'cin': f'CIN{random.randint(100000, 999999)}',  # CIN fictif
                    'email': email,
                    'fonction': fonction,
                    'salaire_base': Decimal(str(salaire)),
                    'site': self.site1 if dept_code in ['RH', 'IT', 'COMPTA', 'VENTE', 'PROD'] else self.site2,
                    'departement': self.departments.get(dept_code),
                    'date_embauche': datetime.now().date() - timedelta(days=random.randint(30, 1800)),
                    'actif': True,
                }
            )
            self.employees[username] = employe
        
        self.stdout.write(f'üë• Employ√©s cr√©√©s: {len(self.employees)}')

    def create_custom_rubriques(self):
        """Cr√©er des rubriques personnalis√©es r√©alistes"""
        rubriques_data = [
            # Gains
            ('PRIME_PERF', 'Prime de Performance', 'GAIN', 'salaire_base * 0.1', 'Prime mensuelle de performance', True, 10),
            ('PRIME_TRANS', 'Prime de Transport', 'GAIN', '400', 'Indemnit√© de transport', True, 20),
            ('PRIME_RESP', 'Prime de Responsabilit√©', 'GAIN', 'salaire_base * 0.15', 'Prime pour les postes √† responsabilit√©', True, 15),
            ('HEURES_SUP', 'Heures Suppl√©mentaires', 'GAIN', '(salaire_base / 173.33) * 1.25', 'Heures suppl√©mentaires major√©es √† 25%', True, 30),
            ('PRIME_ANCIEN', 'Prime d\'Anciennet√©', 'GAIN', 'salaire_base * (anciennete_mois / 120) * 0.05', 'Prime bas√©e sur l\'anciennet√©', True, 25),
            
            # Retenues
            ('RET_RETARD', 'Retenue Retards', 'RETENUE', '(salaire_base / 26) * 0.5', 'Retenue pour retards r√©p√©t√©s', True, 80),
            ('RET_ABSENCE', 'Retenue Absences', 'RETENUE', '(salaire_base / 26)', 'Retenue pour absences injustifi√©es', True, 85),
            ('AVANCE_SAL', 'Avance sur Salaire', 'RETENUE', '1000', 'Remboursement avance sur salaire', True, 90),
            ('RET_MATER', 'Retenue Mat√©riel', 'RETENUE', '200', 'Retenue pour d√©gradation mat√©riel', False, 95),
        ]
        
        self.rubriques = {}
        admin_user = None
        if 'admin' in self.employees:
            admin_user = self.employees['admin'].user
        
        for code, nom, type_rub, formule, description, actif, ordre in rubriques_data:
            rubrique, created = RubriquePersonnalisee.objects.get_or_create(
                code=code,
                defaults={
                    'nom': nom,
                    'type_rubrique': type_rub,
                    'mode_calcul': 'FORMULE',
                    'formule_personnalisee': formule,
                    'description': description,
                    'actif': actif,
                    'ordre_affichage': ordre,
                    'date_debut': datetime.now().date(),
                    'soumis_cnss': type_rub == 'GAIN',
                    'cree_par': admin_user
                }
            )
            self.rubriques[code] = rubrique
        
        self.stdout.write(f'üìã Rubriques cr√©√©es: {len(self.rubriques)}')

    def assign_rubriques_to_employees(self):
        """Assigner des rubriques aux employ√©s de mani√®re r√©aliste"""
        
        # Tous les employ√©s ont la prime de transport
        for emp in self.employees.values():
            EmployeRubrique.objects.get_or_create(
                employe=emp,
                rubrique=self.rubriques['PRIME_TRANS'],
                defaults={'montant_personnalise': Decimal('400'), 'date_debut': datetime.now().date(), 'actif': True}
            )
        
        # Prime de performance pour certains employ√©s
        performance_employees = ['dev1', 'rh1', 'comm1', 'comptable1']
        for emp_key in performance_employees:
            if emp_key in self.employees:
                EmployeRubrique.objects.get_or_create(
                    employe=self.employees[emp_key],
                    rubrique=self.rubriques['PRIME_PERF'],
                    defaults={'date_debut': datetime.now().date(), 'actif': True}  # Calcul√© par formule
                )
        
        # Prime de responsabilit√© pour les managers
        resp_employees = ['drh', 'rh1', 'comm1', 'prod1']
        for emp_key in resp_employees:
            if emp_key in self.employees:
                EmployeRubrique.objects.get_or_create(
                    employe=self.employees[emp_key],
                    rubrique=self.rubriques['PRIME_RESP'],
                    defaults={'date_debut': datetime.now().date(), 'actif': True}
                )
        
        # Prime d'anciennet√© pour les anciens employ√©s
        ancien_employees = ['drh', 'dev1', 'comptable1', 'prod1']
        for emp_key in ancien_employees:
            if emp_key in self.employees:
                EmployeRubrique.objects.get_or_create(
                    employe=self.employees[emp_key],
                    rubrique=self.rubriques['PRIME_ANCIEN'],
                    defaults={'date_debut': datetime.now().date(), 'actif': True}
                )
        
        # Quelques retenues pour des cas sp√©cifiques
        retenue_employees = [('prod2', 'RET_RETARD'), ('comm2', 'AVANCE_SAL')]
        for emp_key, ret_code in retenue_employees:
            if emp_key in self.employees and ret_code in self.rubriques:
                EmployeRubrique.objects.get_or_create(
                    employe=self.employees[emp_key],
                    rubrique=self.rubriques[ret_code],
                    defaults={'date_debut': datetime.now().date(), 'actif': True}
                )
        
        self.stdout.write(f'üîó Rubriques assign√©es aux employ√©s')

    def create_absences(self):
        """Cr√©er quelques absences de test"""
        absence_data = [
            ('rh2', 'CONGE', 3, 'EN_ATTENTE'),
            ('dev2', 'MALADIE', 2, 'APPROUVE'),
            ('comm2', 'RTT', 1, 'APPROUVE'),
            ('prod2', 'CONGE', 5, 'REFUSE'),
        ]
        
        for emp_key, type_abs, nb_jours, statut in absence_data:
            if emp_key in self.employees:
                date_debut = datetime.now().date() + timedelta(days=random.randint(1, 30))
                Absence.objects.get_or_create(
                    employe=self.employees[emp_key],
                    type_absence=type_abs,
                    date_debut=date_debut,
                    defaults={
                        'date_fin': date_debut + timedelta(days=nb_jours-1),
                        'nombre_jours': nb_jours,
                        'statut': statut,
                        'motif': f'Demande de {type_abs.lower()}',
                    }
                )
        
        self.stdout.write(f'üìÖ Absences cr√©√©es pour d√©monstration')
